"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const fs = require("fs-extra");
const os = require("os");
const updateNotifier = require("update-notifier");
initEnvVars();
const pathHelper_1 = require("./helpers/pathHelper");
const init_1 = require("./scripts/init");
const install_1 = require("./scripts/install");
const build_1 = require("./scripts/build");
const serve_1 = require("./scripts/serve");
const deploy_1 = require("./scripts/deploy");
const extras_1 = require("./scripts/extras");
const seed_1 = require("./scripts/seed");
let commands = ['init', 'install', 'build', 'serve', 'deploy'];
let epilog = [
    'You can see specific help for each command. Run app-scripts <command> --help.',
    'You can use napp as shorter alias for app-scripts.'
].join(os.EOL);
let pkg = fs.readJSONSync(pathHelper_1.default.moduleRelative('./package.json'));
updateNotifier({ pkg }).notify();
yargs
    .usage('Usage: app-scripts <command> [options]')
    .command(init_1.default)
    .command(install_1.default)
    .command(build_1.default)
    .command(serve_1.default)
    .command(deploy_1.default)
    .command(extras_1.default)
    .command(seed_1.default)
    .command('*', '', () => { }, argv => {
    let command = argv.command;
    if (!command) {
        console.log('Please, specify valid command name.');
        logAvailableCommands();
    }
    else {
        console.log(`Unknown command "${command}".`);
        console.log('Perhaps you need to update app-scripts?');
        logAvailableCommands();
    }
})
    .help()
    .alias('h', 'help')
    .epilog(epilog)
    .version(pkg.version).argv;
function logAvailableCommands() {
    console.log(`Available options are: ${commands.join(', ')}.`);
    console.log('Run app-scripts with --help option to see available commands.');
}
function initEnvVars() {
    if (!process.env.APP_DIR) {
        process.env.APP_DIR = fs.realpathSync(process.cwd());
    }
    process.env.NODE_ENV = 'production';
}
//# sourceMappingURL=index.js.map