"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const _ = require("lodash");
const globby = require("globby");
const semver = require("semver");
const utils_1 = require("./utils");
const config_1 = require("../config/config");
const pathHelper_1 = require("../helpers/pathHelper");
exports.default = {
    checkTypeScript,
    checkFolderStructure,
    checkDependenciesInstalled,
    checkClientBuildWasGenerated,
    detectMissingGlobalDependencies,
    reportMissingGlobalDependencies,
    getServerEntry,
    getTsBuildEntry,
    isTsServerLang,
    isJsServerLang,
    isUsingReact,
    isUsingVsCode,
    getAppName,
    checkNpmScriptExists,
    getGlobalPackagesInfo
};
function checkTypeScript() {
    if (!utils_1.default.commandExists('tsc')) {
        utils_1.default.log('TypeScript is not installed globally.', 'red');
        utils_1.default.log(`Use 'npm install -g typescript'`);
        process.exit(0);
    }
}
function checkFolderStructure() {
    let logError = message => {
        utils_1.default.log('Wrong project structure.', 'red');
        utils_1.default.log(message);
        utils_1.default.logAndExit('Make sure current directory is correct project folder.');
    };
    let serverFolderExists = fs.existsSync(pathHelper_1.default.serverRelative('./'));
    if (!serverFolderExists) {
        logError('Server folder does not exists.');
    }
    //TODO check for entry file, other checks
    let clientFolderExists = fs.existsSync(pathHelper_1.default.clientRelative('./'));
    if (!clientFolderExists) {
        logError('Client folder does not exists.');
    }
}
function isTsServerLang() {
    let serverEntry = detectEntry();
    return _.endsWith(serverEntry, '.ts');
}
function isJsServerLang() {
    let serverEntry = detectEntry();
    return _.endsWith(serverEntry, '.js');
}
function getServerEntry() {
    let serverEntry = detectEntry();
    return serverEntry;
}
function detectEntry() {
    if (config_1.default.paths.server.entry)
        return pathHelper_1.default.serverRelative(config_1.default.paths.server.entry);
    let entryDir = pathHelper_1.default.serverRelative(config_1.default.paths.server.src);
    let entryTs = pathHelper_1.default.path.join(entryDir, 'index.ts');
    //look for TS entry first
    if (fs.existsSync(entryTs))
        return entryTs;
    let entryJs = pathHelper_1.default.path.join(entryDir, 'index.js');
    if (fs.existsSync(entryJs))
        return entryJs;
    return '';
}
function getTsBuildEntry() {
    let entryRelative = config_1.default.paths.server.entry;
    if (!entryRelative) {
        entryRelative = pathHelper_1.default.path.join(config_1.default.paths.server.src, './index.ts');
    }
    let entry = pathHelper_1.default.serverRelative(config_1.default.paths.server.build);
    entry = pathHelper_1.default.path.join(entry, entryRelative);
    //replace .ts extension with .js extension
    entry = entry.substr(0, entry.length - 3) + '.js';
    return entry;
}
function checkDependenciesInstalled() {
    let logError = message => {
        utils_1.default.log(message, 'red');
        utils_1.default.logAndExit('Please make sure that you have installed server/client dependencies. Run app-scripts install.');
    };
    let serverDependencies = pathHelper_1.default.serverRelative('./node_modules');
    if (!utils_1.default.dirHasContent(serverDependencies)) {
        logError('Server dependencies are not installed.');
    }
    let clientDependencies = pathHelper_1.default.clientRelative('./node_modules');
    if (!utils_1.default.dirHasContent(serverDependencies)) {
        logError('Client dependencies are not installed.');
    }
}
function checkClientBuildWasGenerated() {
    let logError = message => {
        utils_1.default.log(message, 'red');
        utils_1.default.logAndExit('Please make sure that you have built the client. Run app-scripts build.');
    };
    let clientBuild = pathHelper_1.default.clientRelative(config_1.default.paths.client.build);
    if (!utils_1.default.dirHasContent(clientBuild)) {
        logError('Client build folder has not been generated.');
    }
}
function isUsingReact() {
    let clientPkgPath = pathHelper_1.default.clientRelative('./package.json');
    let pkg = fs.readJsonSync(clientPkgPath);
    return pkg.dependencies && pkg.dependencies.react;
}
function isUsingVsCode() {
    return utils_1.default.dirHasContent(pathHelper_1.default.projectRelative('./.vscode'));
}
function detectMissingGlobalDependencies(dependenciesObj) {
    if (!dependenciesObj)
        return [];
    let dependencies = _.map(Object.keys(dependenciesObj), key => {
        return {
            name: key,
            version: dependenciesObj[key]
        };
    });
    let globalPackages = getGlobalPackagesInfo();
    let dependenciesToInstall = {};
    for (let dependency of dependencies) {
        let installed = true;
        if (!globalPackages[dependency.name]) {
            installed = false;
        }
        else {
            if (!dependency.version) {
                utils_1.default.logAndExit(`Global dependency version for ${dependency.name} should not be empty.`);
            }
            if (!semver.valid(dependency.version)) {
                utils_1.default.logAndExit(`Invalid global dependency version: ${dependency.name}: ${dependency.version}`);
            }
            if (semver.gt(dependency.version, globalPackages[dependency.name])) {
                installed = false;
            }
        }
        if (!installed) {
            dependenciesToInstall[dependency.name] = true;
        }
    }
    return dependenciesToInstall;
}
function getGlobalPackagesInfo() {
    let globalModules = require('global-modules');
    const GLOBBY_PACKAGE_JSON = '{*/package.json,@*/*/package.json}';
    const installedPackages = globby.sync(GLOBBY_PACKAGE_JSON, { cwd: globalModules });
    let result = _(installedPackages)
        .map(pkgPath => {
        let pkg = utils_1.default.readJsonFile(pathHelper_1.default.path.resolve(globalModules, pkgPath));
        return [pkg.name, pkg.version];
    })
        .fromPairs()
        .valueOf();
    return result;
}
function reportMissingGlobalDependencies(dependenciesToInstall) {
    if (!_.isEmpty(dependenciesToInstall)) {
        let packagesStr = Object.keys(dependenciesToInstall).join(' ');
        utils_1.default.log(`Some of global dependencies should be installed/updated.`);
        utils_1.default.log(`Please run following command manually and run 'install' script again.`);
        utils_1.default.logAndExit(`npm install -g ${packagesStr}`, 'cyan');
    }
}
function getAppName() {
    let rootPkg = fs.readJsonSync(pathHelper_1.default.projectRelative('./package.json'));
    let result = rootPkg.name;
    if (!result) {
        utils_1.default.logAndExit(`Cannot find app name in package.json file.`);
    }
    return result;
}
function checkNpmScriptExists(location, scriptName, shouldExist = false) {
    let packagePath = location === 'server' ? pathHelper_1.default.serverRelative('./package.json') : pathHelper_1.default.clientRelative('./package.json');
    let packageJson = fs.readJsonSync(packagePath);
    let result = true;
    if (!packageJson.scripts) {
        result = false;
    }
    else {
        if (!packageJson.scripts[scriptName])
            result = false;
    }
    if (shouldExist && !result) {
        utils_1.default.logAndExit(`Script "${scriptName}" does not exist in ${location} package.json file.`);
    }
    return result;
}
//# sourceMappingURL=envHelper.js.map