"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const downloadGitRepo = require("download-git-repo");
const utils_1 = require("./utils");
exports.default = {
    downloadGitRepository
};
function downloadGitRepository(origin, repository, branch, directory) {
    return __awaiter(this, void 0, void 0, function* () {
        fs.emptyDirSync(directory);
        yield download(origin, repository, branch, directory);
        let gitFolderPath = path.join(directory, '.git');
        utils_1.default.removeDir(gitFolderPath);
    });
}
function download(origin, repository, branch, directory) {
    return new Promise((resolve, reject) => {
        let repoPath = origin ? `${origin}:` : '';
        repoPath += `${repository}#${branch}`;
        downloadGitRepo(repoPath, directory, err => {
            if (err)
                return reject(err);
            return resolve();
        });
    });
}
//# sourceMappingURL=gitHelper.js.map