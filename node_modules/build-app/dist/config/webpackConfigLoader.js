"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = require("webpack");
const nodeExternals = require("webpack-node-externals");
const pathHelper_1 = require("../helpers/pathHelper");
const config_1 = require("./config");
const envHelper_1 = require("../helpers/envHelper");
exports.default = {
    loadWebpackConfig
};
function loadWebpackConfig(profile) {
    let webpackConfig = getDefaultConfig();
    if (profile === 'ts_prod') {
        let tsEntry = envHelper_1.default.getTsBuildEntry();
        webpackConfig.entry = ['babel-polyfill', tsEntry];
    }
    else {
        let jsEntry = envHelper_1.default.getServerEntry();
        webpackConfig.entry = [jsEntry];
    }
    loadPlugins(webpackConfig);
    let presetName = profile === 'ts_prod' ? 'babel-preset-es2015' : 'babel-preset-backpack';
    initBabel(webpackConfig, presetName);
    loadExternals(webpackConfig, ['regenerator-runtime']);
    return webpackConfig;
}
function getDefaultConfig() {
    //missing: entry, externals
    return {
        target: 'node',
        devtool: 'source-map',
        performance: {
            hints: false
        },
        entry: [],
        externals: {},
        output: {
            path: pathHelper_1.default.serverRelative(config_1.default.paths.server.build),
            filename: 'server.js',
            libraryTarget: 'commonjs2',
            publicPath: pathHelper_1.default.serverRelative('./')
        },
        resolve: {
            extensions: ['.js', '.json'],
            modules: [
                pathHelper_1.default.moduleRelative('./node_modules'),
                pathHelper_1.default.serverRelative(config_1.default.paths.server.build, config_1.default.paths.server.src)
            ]
        },
        resolveLoader: {
            modules: [pathHelper_1.default.moduleRelative('./node_modules')]
        },
        node: {
            __filename: false,
            __dirname: false
        },
        plugins: [new webpack.NoErrorsPlugin()],
        module: {
            rules: [
                {
                    test: /\.json$/,
                    loader: 'json-loader'
                }
            ]
        }
    };
}
function loadPlugins(webpackConfig) {
    if (config_1.default.server.build.minify) {
        let minifyPlugin = new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false
            }
        });
        webpackConfig.plugins.push(minifyPlugin);
    }
}
function initBabel(webpackConfig, presetName) {
    let preset = require.resolve(presetName);
    let babelLoader = {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: 'babel-loader',
        options: {
            //TODO enable custom, like in backpack
            babelrc: false,
            presets: [preset]
        }
    };
    webpackConfig.module.rules.push(babelLoader);
}
function loadExternals(webpackConfig, whitelist) {
    let nodeModules = {};
    let nodeModulesPath = pathHelper_1.default.serverRelative('./node_modules');
    webpackConfig.externals = nodeExternals({
        whitelist,
        modulesDir: nodeModulesPath
    });
}
//# sourceMappingURL=webpackConfigLoader.js.map