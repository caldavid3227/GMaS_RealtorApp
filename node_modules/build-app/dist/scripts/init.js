"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const chalk = require("chalk");
const inquirer = require("inquirer");
const validateProjectName = require("validate-npm-package-name");
const pathHelper_1 = require("../helpers/pathHelper");
const gitHelper_1 = require("../helpers/gitHelper");
const utils_1 = require("../helpers/utils");
const envHelper_1 = require("../helpers/envHelper");
const config_1 = require("../config/config");
exports.default = {
    command: 'init [app-name]',
    describe: 'Init new project',
    handler: commandHandler,
    builder: commandBuilder
};
const templateRegistry = utils_1.default.readJsonFile(pathHelper_1.default.moduleRelative('./assets/init/templates.json'));
const supportedIdes = {
    code: 'Visual Studio Code',
    ws: 'WebStorm'
};
function commandBuilder(yargs) {
    return yargs
        .option('project', {
        alias: 'p',
        description: 'Templates project'
    })
        .option('server', {
        alias: 's',
        description: 'Server template'
    })
        .option('client', {
        alias: 'c',
        description: 'Client template'
    })
        .option('default', {
        alias: 'df',
        description: 'Init with default templates'
    })
        .option('list', {
        alias: 'ls',
        description: 'Show list of templates'
    })
        .option('ide', {
        description: 'Init with specified IDE settings'
    })
        .example('init my-app -p simple -s ts -c react', 'inits new app in "my-app" folder with templates "ts", "react" in project "simple"')
        .example('init my-app --default --ide code', 'inits project with default templates and VS Code settings')
        .example('init my-app --list', 'show list of all available templates grouped by project');
}
function commandHandler(argv) {
    if (argv.list) {
        return showTemplatesList();
    }
    if (!argv.appName) {
        interactiveInit();
    }
    else {
        cliInit(argv);
    }
}
function initCommand(appName, project, serverTemplate, clientTemplate, ide) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!checkAppName(appName))
            process.exit(1);
        let templatesInfo = getTemplatesInfo(project, serverTemplate, clientTemplate);
        let root = pathHelper_1.default.projectRelative(`./${appName}`);
        pathHelper_1.default.setAppPath(root);
        utils_1.default.log(`Init new project based on project "${project}".`);
        utils_1.default.log(`Server template: "${serverTemplate}".`);
        utils_1.default.log(`Client template: "${clientTemplate}".`);
        utils_1.default.log(`Project folder: "${pathHelper_1.default.getAppPath()}".`);
        //check app folder
        if (utils_1.default.isEmptyDir(root)) {
            fs.ensureDirSync(root);
        }
        else {
            utils_1.default.log('Project folder is not empty.', 'red');
            let answer = yield utils_1.default.prompt('Do you want to empty the folder? All files will be deleted.', false);
            if (!answer) {
                process.exit(0);
            }
            else {
                utils_1.default.logOperation('Empty project folder', () => {
                    utils_1.default.ensureEmptyDir(root);
                });
            }
        }
        yield utils_1.default.logOperation('Downloading server template', downloadTemplate(templatesInfo.serverTemplate, pathHelper_1.default.serverRelative('./')));
        yield utils_1.default.logOperation('Downloading client template', downloadTemplate(templatesInfo.clientTemplate, pathHelper_1.default.clientRelative('./')));
        copyAssets(appName);
        if (!ide)
            ide = 'code'; //use vs code by default
        //TODO support JS
        if (ide && envHelper_1.default.isTsServerLang()) {
            initIde(ide);
        }
        initLinter();
        utils_1.default.log(`Project was initialized! Change directory to project folder '${appName}'.`, 'green');
    });
}
function checkAppName(appName) {
    const validationResult = validateProjectName(appName);
    if (!validationResult.validForNewPackages) {
        console.error(`Could not create a project called ${chalk.red(`"${appName}"`)} because of npm naming restrictions:`);
        printValidationResults(validationResult.errors);
        printValidationResults(validationResult.warnings);
        return false;
    }
    return true;
}
function printValidationResults(results) {
    if (typeof results !== 'undefined') {
        results.forEach(error => {
            console.error(chalk.red(`  *  ${error}`));
        });
    }
}
function showTemplatesList() {
    let logWithTabs = (message, tabs) => {
        let tabStr = '';
        for (let i = 0; i <= tabs - 1; i++)
            tabStr += ' ';
        utils_1.default.log(tabStr + message);
    };
    logWithTabs(`Projects:`, 0);
    for (let project of Object.keys(templateRegistry.projects)) {
        logWithTabs(project, 2);
        logWithTabs('server:', 4);
        for (let serverTemplate of Object.keys(templateRegistry.projects[project].server)) {
            logWithTabs(serverTemplate, 6);
        }
        logWithTabs('client:', 4);
        for (let clientTemplate of Object.keys(templateRegistry.projects[project].client)) {
            logWithTabs(clientTemplate, 6);
        }
    }
}
function getTemplatesInfo(project, serverTemplate, clientTemplate) {
    let params = [];
    if (!templateRegistry.projects[project]) {
        let projects = Object.keys(templateRegistry.projects);
        utils_1.default.assertValueIsInTheList(project, projects, `Incorrect project name '${project}'.`);
    }
    let projectInfo = templateRegistry.projects[project];
    let serverTemplateInfo = projectInfo.server[serverTemplate];
    if (!serverTemplateInfo) {
        let templates = Object.keys(projectInfo.server);
        utils_1.default.assertValueIsInTheList(serverTemplate, templates, `Incorrect server template '${serverTemplate}'.`);
    }
    serverTemplateInfo.name = serverTemplate;
    let clientTemplateInfo = projectInfo.client[clientTemplate];
    if (!clientTemplateInfo) {
        let templates = Object.keys(projectInfo.client);
        utils_1.default.assertValueIsInTheList(clientTemplate, templates, `Incorrect client template '${clientTemplate}'.`);
    }
    clientTemplateInfo.name = clientTemplate;
    return {
        serverTemplate: serverTemplateInfo,
        clientTemplate: clientTemplateInfo
    };
}
function downloadTemplate(templateInfo, directory) {
    return __awaiter(this, void 0, void 0, function* () {
        yield gitHelper_1.default.downloadGitRepository(templateInfo.origin, templateInfo.repo, templateInfo.branch, directory);
    });
}
function copyAssets(appName) {
    let packagePath = pathHelper_1.default.moduleRelative('./assets/init/rootPackage.json');
    let appPackage = fs.readJsonSync(packagePath);
    appPackage.name = appName;
    fs.writeJSONSync(pathHelper_1.default.projectRelative('./package.json'), appPackage);
    fs.copySync(pathHelper_1.default.moduleRelative('./assets/init/_gitignore'), pathHelper_1.default.projectRelative('./.gitignore'));
    let tsconfigPath = pathHelper_1.default.serverRelative('./tsconfig.json');
    if (!fs.existsSync(tsconfigPath)) {
        fs.copySync(pathHelper_1.default.moduleRelative('./assets/init/tsconfig.json'), tsconfigPath);
    }
    fs.copySync(pathHelper_1.default.moduleRelative('./assets/init/quickTest.ts'), pathHelper_1.default.serverRelative(config_1.default.paths.server.src, './quickTest.ts'));
    //copy client build placeholder
    let clientIndexPath = pathHelper_1.default.clientRelative(config_1.default.paths.client.build, './index.html');
    if (!fs.existsSync(clientIndexPath)) {
        utils_1.default.ensureEmptyDir(pathHelper_1.default.clientRelative(config_1.default.paths.client.build));
        fs.copySync(pathHelper_1.default.moduleRelative('./assets/init/clientBuildPlaceholder.html'), clientIndexPath);
    }
}
function checkIdeOption(ide) {
    let ides = Object.keys(supportedIdes);
    if (ides.indexOf(ide) === -1) {
        utils_1.default.logAndExit(`Incorrect IDE value, supported IDEs are [${ides.join(', ')}].`);
    }
}
function initIde(ide) {
    let lang = envHelper_1.default.isTsServerLang() ? 'ts' : 'js';
    if (ide === 'ws') {
        let jsLevel = envHelper_1.default.isUsingReact() ? 'JSX' : 'ES6';
        let context = {
            JS_LEVEL: jsLevel
        };
        let from = pathHelper_1.default.moduleRelative(`./assets/ide/ws/${lang}`);
        let to = pathHelper_1.default.projectRelative('./.idea');
        utils_1.default.copyTemplateFolder(from, to, context);
    }
    if (ide === 'code') {
        let from = pathHelper_1.default.moduleRelative(`./assets/ide/code/${lang}`);
        let to = pathHelper_1.default.projectRelative('./.vscode');
        utils_1.default.copyTemplateFolder(from, to);
    }
}
function initLinter() {
    if (envHelper_1.default.isTsServerLang) {
        let from = pathHelper_1.default.moduleRelative('./assets/linter/tslint.json');
        let to = pathHelper_1.default.serverRelative('./tslint.json');
        fs.copySync(from, to);
    }
}
function cliInit(argv) {
    if (argv.ide) {
        checkIdeOption(argv.ide);
    }
    if (argv.default) {
        return initCommand(argv.appName, 'simple', 'ts', 'react', argv.ide);
    }
    let params = [argv.project, argv.server, argv.client];
    for (let param of params) {
        if (!param) {
            console.log(`Please specify project, server and client options or use defaults with --default option.`);
            return console.log(`Run init -h to get more information`);
        }
    }
    initCommand(argv.appName, argv.project, argv.server, argv.client, argv.ide);
}
function interactiveInit() {
    utils_1.default.log('Initialize new app:', 'cyan');
    let getProjectChoices = () => {
        let projects = Object.keys(templateRegistry.projects);
        return projects.map(p => ({ value: p, name: templateRegistry.projects[p].description }));
    };
    let getTemplatesOptions = (p, group) => {
        let project = templateRegistry.projects[p];
        return Object.keys(project[group]).map(t => ({
            value: t,
            name: project[group][t].description
        }));
    };
    let questions = [
        {
            type: 'input',
            name: 'appName',
            message: 'What is you app name?',
            validate: value => {
                return checkAppName(value);
            }
        },
        {
            type: 'list',
            name: 'project',
            message: 'Choose from available projects',
            choices: getProjectChoices()
        },
        {
            type: 'list',
            name: 'server',
            message: 'Choose back-end template:',
            choices: answers => getTemplatesOptions(answers.project, 'server')
        },
        {
            type: 'list',
            name: 'client',
            message: 'Choose front-end template:',
            choices: answers => getTemplatesOptions(answers.project, 'client')
        },
        {
            type: 'list',
            name: 'ide',
            message: 'Choose IDE/editor:',
            choices: answers => [
                { name: 'VS Code', value: 'code' },
                //TODO enable when ready
                //{name: 'WebStorm', value: 'ws'},
                { name: 'None', value: 'none' }
            ]
        }
    ];
    inquirer.prompt(questions).then(answers => {
        initCommand(answers.appName, answers.project, answers.server, answers.client, answers.ide);
    });
}
//# sourceMappingURL=init.js.map