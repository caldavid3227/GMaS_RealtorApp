"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config/config");
const utils_1 = require("../helpers/utils");
const pathHelper_1 = require("../helpers/pathHelper");
const envHelper_1 = require("../helpers/envHelper");
exports.default = {
    command: 'serve',
    describe: 'Run in dev mode',
    aliases: ['s'],
    handler,
    builder
};
function builder(yargs) {
    return yargs
        .option('server', {
        alias: 's',
        boolean: true,
        description: 'install to server'
    })
        .option('client', {
        alias: 'c',
        boolean: true,
        description: 'install to client'
    })
        .example('serve -s', 'runs server in dev mode')
        .example('serve -c', 'runs client in dev mode');
}
function handler(argv) {
    envHelper_1.default.checkFolderStructure();
    envHelper_1.default.checkDependenciesInstalled();
    let target = 'server';
    if (argv.client) {
        target = 'client';
    }
    switch (target) {
        case 'server':
            envHelper_1.default.checkClientBuildWasGenerated();
            serveServer();
            break;
        case 'client':
            serveClient();
            break;
        default:
            break;
    }
}
function serveServer() {
    utils_1.default.clearConsole();
    //TODO use babel-node
    if (envHelper_1.default.isJsServerLang()) {
        return utils_1.default.runCommand('npm', ['run', 'start'], {
            title: 'Serve server',
            path: pathHelper_1.default.serverRelative('./'),
            showOutput: true
        });
    }
    //TODO move versions to config
    let missingGlobalDependencies = envHelper_1.default.detectMissingGlobalDependencies({
        'ts-node': '3.0.2',
        nodemon: '1.11.0'
    });
    envHelper_1.default.reportMissingGlobalDependencies(missingGlobalDependencies);
    let debugMode = envHelper_1.default.isUsingVsCode() ? 'inspect' : 'debug';
    let entry = envHelper_1.default.getServerEntry();
    utils_1.default.runCommand('nodemon', ['--watch', 'src', '--exec', 'ts-node', `--${debugMode}=${config_1.default.server.dev.debugPort}`, entry], {
        title: 'Serve server',
        path: pathHelper_1.default.serverRelative('./'),
        showOutput: true,
        env: {
            TS_NODE_COMPILER_OPTIONS: JSON.stringify({
                inlineSourceMap: true
            })
        }
    });
}
function serveClient() {
    utils_1.default.clearConsole();
    utils_1.default.runCommand('npm', ['run', 'start'], {
        title: 'Serve client',
        path: pathHelper_1.default.clientRelative('./'),
        showOutput: true
    });
}
//# sourceMappingURL=serve.js.map