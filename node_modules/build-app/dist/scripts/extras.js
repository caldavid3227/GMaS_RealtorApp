"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const fs = require("fs-extra");
const psList = require("ps-list");
const fkill = require("fkill");
const utils_1 = require("../helpers/utils");
const pathHelper_1 = require("../helpers/pathHelper");
const config_1 = require("../config/config");
const envHelper_1 = require("../helpers/envHelper");
exports.default = {
    command: 'extras [sub_command] [options]',
    describe: 'Additional commands (undocumented features)',
    handler: commandHandler,
    builder: commandBuilder
};
function commandBuilder(yargs) {
    return yargs
        .example('napp extras archive', 'Archive app sources')
        .example('napp extras package-list-global', 'Show global packages')
        .example('napp extras package-updates', 'Show updates')
        .example('napp extras kill-all', 'Kill all node processes');
}
function commandHandler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (argv.sub_command) {
            case 'archive':
                envHelper_1.default.checkFolderStructure();
                yield utils_1.default.logOperation('Archive app sources', archive);
                break;
            case 'package-list-global':
                yield showGlobalPackages();
                break;
            case 'package-updates':
                runNpmCheckUpdates();
                break;
            case 'kill-all':
                yield killAll();
                break;
            default:
                utils_1.default.logAndExit('Run with --help parameter to see available options');
                break;
        }
    });
}
function archive() {
    return __awaiter(this, void 0, void 0, function* () {
        let archiveDir = pathHelper_1.default.projectRelative(config_1.default.paths.archive.root);
        let archiveFileName = `${envHelper_1.default.getAppName()}_src.zip`;
        let archivePath = pathHelper_1.default.projectRelative(archiveFileName);
        utils_1.default.ensureEmptyDir(archiveDir);
        let exclude = [
            pathHelper_1.default.clientRelative(config_1.default.paths.client.build),
            pathHelper_1.default.projectRelative(config_1.default.paths.build.root),
            pathHelper_1.default.projectRelative(config_1.default.paths.deploy.root),
            pathHelper_1.default.projectRelative(config_1.default.paths.archive.root),
            pathHelper_1.default.projectRelative('./.git'),
            pathHelper_1.default.projectRelative('./.idea'),
            pathHelper_1.default.projectRelative('./node_modules'),
            pathHelper_1.default.serverRelative('./node_modules'),
            pathHelper_1.default.serverRelative(config_1.default.paths.server.build),
            pathHelper_1.default.serverRelative(config_1.default.paths.server.local),
            pathHelper_1.default.clientRelative('./node_modules'),
            archivePath
        ];
        fs.copySync(pathHelper_1.default.projectRelative('./'), archiveDir, {
            filter: path => {
                for (let excludePath of exclude) {
                    if (_.startsWith(path, excludePath)) {
                        return false;
                    }
                }
                return true;
            }
        });
        yield utils_1.default.archiveFolder(archiveDir, archivePath);
        utils_1.default.removeDir(archiveDir);
    });
}
function showGlobalPackages() {
    let globalPackagesInfo = envHelper_1.default.getGlobalPackagesInfo();
    for (let packageName of Object.keys(globalPackagesInfo)) {
        let version = globalPackagesInfo[packageName];
        utils_1.default.log(`${packageName}: ${version}`);
    }
}
function runNpmCheckUpdates() {
    let checkerCommand = utils_1.default.findGlobalCommandByPrecedence(['npm-check', 'ncu']);
    if (!checkerCommand) {
        utils_1.default.logAndExit(`Please install 'npm-check-updates' or 'npm-check' package globally`);
    }
    utils_1.default.log('Server:', 'green');
    utils_1.default.runCommand(checkerCommand, [], {
        path: pathHelper_1.default.serverRelative('./'),
        showOutput: true
    });
    utils_1.default.log('Client:', 'green');
    utils_1.default.runCommand(checkerCommand, [], {
        path: pathHelper_1.default.clientRelative('./'),
        showOutput: true
    });
    utils_1.default.log('Note:', 'cyan');
    utils_1.default.log(`To upgrade server/client packages run '${checkerCommand} -u' in server/client folder`);
    checkerCommand;
}
function killAll() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let processes = yield psList();
            let count = 0;
            for (let pr of processes) {
                if (pr.cmd === 'node.exe' || pr.cmd === 'node') {
                    if (pr.pid !== process.pid) {
                        try {
                            count++;
                            yield fkill(pr.pid, { force: true, tree: true });
                        }
                        catch (err) { }
                    }
                }
            }
            let message = count ? `${count} node processes were terminated.` : `No other node processes are running.`;
            utils_1.default.log(message);
        }
        catch (err) {
            utils_1.default.log(err);
        }
    });
}
//# sourceMappingURL=extras.js.map