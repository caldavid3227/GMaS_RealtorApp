"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
process.noDeprecation = true;
const fs = require("fs-extra");
const webpack = require("webpack");
const chalk = require("chalk");
const klawSync = require("klaw-sync");
const webpackConfigLoader_1 = require("../config/webpackConfigLoader");
const webpackHelper_1 = require("../helpers/webpackHelper");
const pathHelper_1 = require("./../helpers/pathHelper");
const utils_1 = require("./../helpers/utils");
const envHelper_1 = require("../helpers/envHelper");
const config_1 = require("../config/config");
exports.default = {
    command: 'build',
    describe: 'Build project for production',
    handler: commandHandler,
    builder: commandBuilder,
    build
};
function commandBuilder(yargs) {
    return yargs
        .option('server', {
        alias: 's',
        boolean: true,
        description: 'build server'
    })
        .option('client', {
        alias: 'c',
        boolean: true,
        description: 'build client'
    });
}
function commandHandler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        envHelper_1.default.checkFolderStructure();
        envHelper_1.default.checkDependenciesInstalled();
        let target = 'full';
        if (argv.server)
            target = 'server';
        if (argv.client)
            target = 'client';
        if (argv.server && argv.client)
            target = 'full';
        yield build(target);
    });
}
function build(target = 'full') {
    return __awaiter(this, void 0, void 0, function* () {
        let startTime = new Date();
        utils_1.default.log('Build project in ' + chalk.cyan(pathHelper_1.default.getAppPath()) + '.');
        let buildDir = config_1.default.paths.build.root;
        utils_1.default.ensureEmptyDir(buildDir);
        if (target !== 'client') {
            yield buildServer();
        }
        else {
            utils_1.default.log(`Build server... ${chalk.yellow('skipped')}.`);
        }
        copyServerOutput();
        if (target !== 'server') {
            yield buildClient();
        }
        else {
            utils_1.default.log(`Build client... ${chalk.yellow('skipped')}.`);
        }
        copyClientOutput();
        utils_1.default.log('Post build:');
        utils_1.default.logOperation('Copying data folder', () => {
            copyDataFolder();
            //index file to run app with production env params
            utils_1.default.copyToPackage(pathHelper_1.default.moduleRelative('./assets/build/serverIndex.js'), './index.js');
        });
        let endTime = new Date();
        let compilationTime = utils_1.default.getFormattedTimeInterval(startTime, endTime);
        utils_1.default.log('Build package was created!', 'green');
        utils_1.default.log('Compilation time: ' + chalk.cyan(compilationTime) + '.');
        if (config_1.default.postBuild.archive) {
            let archive = utils_1.default.archiveFolder(pathHelper_1.default.buildRelative('./'), pathHelper_1.default.buildRelative('./build.zip'));
            return utils_1.default.logOperation('Archive build package', archive);
        }
    });
}
function buildServer() {
    return __awaiter(this, void 0, void 0, function* () {
        utils_1.default.log('Server build:', 'green');
        runNpmScriptIfExists('pre-build', 'server');
        if (envHelper_1.default.isTsServerLang()) {
            envHelper_1.default.checkTypeScript();
            utils_1.default.runCommand('tsc', [], {
                path: pathHelper_1.default.serverRelative('./'),
                title: 'Compiling TypeScript',
                showOutput: true
            });
        }
        yield utils_1.default.logOperation('Transpiling JavaScript', buildServerJs());
        runNpmScriptIfExists('post-build', 'server');
    });
}
function copyServerOutput() {
    utils_1.default.logOperation('Copying assets', () => {
        utils_1.default.copyToPackage(pathHelper_1.default.serverRelative(config_1.default.paths.server.bundle), './server/server.js');
        let serverPackagePath = pathHelper_1.default.serverRelative('./package.json');
        let serverPackageJson = utils_1.default.readJsonFile(serverPackagePath);
        let rootPackagePath = pathHelper_1.default.projectRelative('./package.json');
        let rootPackage = utils_1.default.readJsonFile(rootPackagePath);
        let buildPackageJson = {
            name: rootPackage.name,
            version: rootPackage.version,
            scripts: {
                start: 'node index.js'
            },
            dependencies: serverPackageJson.dependencies
        };
        fs.outputJsonSync(pathHelper_1.default.buildRelative('./package.json'), buildPackageJson);
    });
}
function buildServerJs() {
    return new Promise((resolve, reject) => {
        let webpackConfig = null;
        if (envHelper_1.default.isTsServerLang()) {
            webpackConfig = webpackConfigLoader_1.default.loadWebpackConfig('ts_prod');
        }
        else {
            webpackConfig = webpackConfigLoader_1.default.loadWebpackConfig('js_prod');
        }
        webpack(webpackConfig).run((err, stats) => {
            if (err)
                return reject(err);
            webpackHelper_1.default.handleErrors(err, stats, true);
            resolve();
        });
    });
}
function buildClient() {
    utils_1.default.log('Client build:', 'green');
    runNpmScriptIfExists('pre-build', 'client');
    utils_1.default.runCommand('npm', ['run', 'build'], {
        title: 'Build client',
        path: pathHelper_1.default.clientRelative('./')
    });
    runNpmScriptIfExists('post-build', 'client');
    return Promise.resolve();
}
function copyClientOutput() {
    utils_1.default.logOperation('Copying assets', () => {
        utils_1.default.copyToPackage(pathHelper_1.default.clientRelative(config_1.default.paths.client.build), './client');
        if (config_1.default.server.build.removeMapFiles) {
            let clientPath = pathHelper_1.default.buildRelative(config_1.default.paths.client.root);
            let files = klawSync(clientPath);
            for (let file of files) {
                if (file.path.endsWith('.map')) {
                    fs.removeSync(file.path);
                }
            }
        }
    });
}
function copyDataFolder() {
    utils_1.default.copyToPackage(pathHelper_1.default.serverRelative(config_1.default.paths.server.data), './data/');
    utils_1.default.ensureEmptyDir(pathHelper_1.default.buildRelative('./data/config'));
}
function runNpmScriptIfExists(scriptName, target) {
    if (envHelper_1.default.checkNpmScriptExists(target, scriptName)) {
        utils_1.default.runCommand('npm', ['run', scriptName], {
            title: `Running ${scriptName} npm script`,
            path: target === 'server' ? pathHelper_1.default.serverRelative('./') : pathHelper_1.default.clientRelative('./')
        });
    }
}
//# sourceMappingURL=build.js.map