"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const utils_1 = require("../helpers/utils");
const pathHelper_1 = require("../helpers/pathHelper");
const config_1 = require("../config/config");
const envHelper_1 = require("../helpers/envHelper");
const packagesHelper_1 = require("../helpers/packagesHelper");
exports.default = {
    command: 'install [package]',
    describe: 'Install project dependencies',
    aliases: ['i'],
    handler: commandHandler,
    builder: commandBuilder,
    installAll
};
function commandBuilder(yargs) {
    return yargs
        .option('server', {
        alias: 's',
        boolean: true,
        description: 'install to server'
    })
        .option('client', {
        alias: 'c',
        boolean: true,
        description: 'install to client'
    })
        .option('dev', {
        alias: 'D',
        boolean: true,
        description: 'install as devDependency'
    })
        .option('with', {
        description: 'specify package manager'
    })
        .example('install', 'install all dependencies for server/client, check global dependencies')
        .example('install --with npm', 'install all dependencies with npm package manager')
        .example('install lodash -s', 'install lodash to server')
        .example('install jquery -c', 'install jquery to client')
        .example('install typescript -c -D', 'install typescript to server in in your devDependencies');
}
function commandHandler(argv) {
    envHelper_1.default.checkFolderStructure();
    let packageManager = null;
    if (argv.with) {
        utils_1.default.assertValueIsInTheList(argv.with, config_1.packageManagers, `Incorrect package manager '${argv.with}'.`);
        packageManager = argv.with;
    }
    if (!argv.package) {
        return installAll(packageManager);
    }
    //TODO demand -s or -c
    let target = 'server';
    if (argv.client) {
        target = 'client';
    }
    return installPackage(argv.package, target, argv.dev, packageManager);
}
function installAll(packageManager = null) {
    try {
        checkGlobalDependencies();
    }
    catch (err) {
        //TODO
        utils_1.default.log('Cannot check global dependencies.', 'red');
    }
    let commandInfo = packagesHelper_1.default.getInstallPackagesCommand(packageManager);
    utils_1.default.runCommand(commandInfo.command, commandInfo.params, {
        title: `Install server dependencies with ${commandInfo.command}`,
        path: pathHelper_1.default.projectRelative(config_1.default.paths.server.root),
        showOutput: true
    });
    utils_1.default.runCommand(commandInfo.command, commandInfo.params, {
        title: `Install client dependencies with ${commandInfo.command}`,
        path: pathHelper_1.default.projectRelative(config_1.default.paths.client.root),
        showOutput: true
    });
}
function checkGlobalDependencies() {
    let getGlobalDependencies = packagePath => {
        return utils_1.default.readJsonFile(packagePath).globalDependencies;
    };
    let serverDependencies = getGlobalDependencies(pathHelper_1.default.serverRelative('./package.json'));
    let clientDependencies = getGlobalDependencies(pathHelper_1.default.clientRelative('./package.json'));
    if (_.isEmpty(serverDependencies) && _.isEmpty(clientDependencies))
        return;
    let serverDependenciesToInstall = envHelper_1.default.detectMissingGlobalDependencies(serverDependencies);
    let clientDependenciesToInstall = envHelper_1.default.detectMissingGlobalDependencies(clientDependencies);
    let dependenciesToInstall = _.merge(serverDependenciesToInstall, clientDependenciesToInstall);
    envHelper_1.default.reportMissingGlobalDependencies(dependenciesToInstall);
}
function installPackage(packageName, target, isDevDependency, packageManager = null) {
    let commandInfo = packagesHelper_1.default.getInstallPackageCommand(packageName, isDevDependency, packageManager);
    let folder = target === 'server' ? pathHelper_1.default.serverRelative('./') : pathHelper_1.default.clientRelative('./');
    utils_1.default.runCommand(commandInfo.command, commandInfo.params, {
        title: `Install package '${packageName}' into ${target} with ${commandInfo.command}`,
        path: folder
    });
}
//# sourceMappingURL=install.js.map